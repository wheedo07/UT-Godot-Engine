<?xml version="1.0" encoding="UTF-8" ?>
<class name="AttackBase" inherits="Node" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
    <brief_description>
        UT-Godot-Engine에서 전투 시스템의 공격 패턴을 구현하는 베이스 클래스입니다.
        모든 공격 패턴은 이 클래스를 상속받아 구현되며, 탄환 생성, 배치, 마스킹 등의 핵심 기능을 제공합니다.
    </brief_description>
    <description>
        [b]AttackBase[/b]는 Undertale 스타일 전투 시스템의 공격 패턴을 구현하는 핵심 베이스 클래스입니다.
        
        [b]주요 기능[/b]
        • 탄환 생성 및 배치 시스템
        • 마스킹 기반 렌더링 제어
        • 공격 패턴 생명주기 관리
        • 전투 시스템 컴포넌트 자동 접근
        • 카메라 흔들림 및 페이드 효과 자동 연결
        
        [b]마스킹 시스템[/b]
        • [code]ABSOLUTE_CLIP[/code]: 절대 위치 + 박스 영역으로 클리핑
        • [code]ABSOLUTE[/code]: 절대 위치 + 클리핑 없음
        • [code]RELATIVE_BOX_CLIP[/code]: 박스 기준 상대 위치 + 클리핑
        • [code]RELATIVE_BOX[/code]: 박스 기준 상대 위치 + 클리핑 없음
        
        [b]가상 함수 시스템[/b]
        • [method ready]와 [method start_attack] 메서드를 반드시 구현해야 합니다
        • C++과 GDScript 모두에서 오버라이드 가능
        
        [b]예시 (GDScript)[/b]
        [codeblock]
        extends AttackBase
        
        @export var bullet_scene: PackedScene
        
        func ready():
            # 공격 패턴 초기화
            pass
        
        func start_attack():
            # 박스 크기 조정
            box.change_size(Vector2(300, 200), false, 0.5)
            
            # 원형 탄환 패턴 생성
            var center = box.get_size() / 2
            for i in range(8):
                var angle = (float(i) / 8) * PI * 2.0
                var pos = center + Vector2(cos(angle), sin(angle)) * 100
                quick_bullet(bullet_scene, pos, rad_to_deg(angle), AttackBase.RELATIVE_BOX_CLIP)
                await get_tree().create_timer(0.1).timeout
            
            # 3초 후 공격 종료
            await get_tree().create_timer(3.0).timeout
            end_attack()
        [/codeblock]
    </description>
    <tutorials></tutorials>
    
    <methods>
        <method name="ready" qualifiers="virtual">
            <return type="void"/>
            <description>
                공격 패턴 초기화 함수입니다. C++과 GDScript에서 반드시 오버라이드해야 합니다.
                탄환 씬 로딩, 변수 초기화 등의 작업을 수행합니다.
                전투 시스템 컴포넌트들([member main], [member box], [member soul] 등)은 이미 초기화된 상태입니다.
            </description>
        </method>
        
        <method name="start_attack" qualifiers="virtual">
            <return type="void"/>
            <description>
                공격 패턴을 시작하는 함수입니다. C++과 GDScript에서 반드시 오버라이드해야 합니다.
                실제 탄환 생성 로직, 박스 크기 조정, 타이밍 제어 등을 구현합니다.
                공격이 완료되면 [method end_attack]을 호출해야 합니다.
            </description>
        </method>
        
        <method name="add_bullet">
            <return type="void"/>
            <param index="0" name="bullet" type="Node"/>
            <param index="1" name="mask" type="int" enum="AttackBase.Masking" default="0"/>
            <description>
                탄환 노드를 씬에 추가합니다.
                [param bullet]은 추가할 탄환 노드, [param mask]는 렌더링 방식을 결정합니다.
                탄환에 [code]shake_camera[/code] 시그널이 있으면 카메라와 자동 연결됩니다.
                탄환에 [code]fade[/code] 메서드가 있으면 [signal remove_bullets] 시그널과 자동 연결됩니다.
            </description>
        </method>
        
        <method name="quick_bullet">
            <return type="Node"/>
            <param index="0" name="bullet_scene" type="PackedScene"/>
            <param index="1" name="pos" type="Vector2"/>
            <param index="2" name="rot_deg" type="float" default="0"/>
            <param index="3" name="mask" type="int" enum="AttackBase.Masking" default="0"/>
            <description>
                탄환 씬을 빠르게 생성하고 배치합니다.
                [param bullet_scene]은 인스턴스화할 탄환 씬입니다.
                [param pos]는 탄환 위치, [param rot_deg]는 회전각(도 단위)입니다.
                [param mask]는 렌더링 방식을 결정합니다.
                생성된 탄환 노드를 반환하며, 실패 시 null을 반환합니다.
            </description>
        </method>
        
        <method name="end_attack">
            <return type="void"/>
            <description>
                공격 패턴을 종료합니다.
                [signal remove_bullets] 시그널을 발생시켜 모든 탄환을 제거하고,
                [signal remove_attack] 시그널을 발생시켜 자신을 제거합니다.
                모든 공격 패턴은 완료 시 이 메서드를 호출해야 합니다.
            </description>
        </method>
    </methods>
    
    <members>
        <member name="attack_id" type="int" setter="set_attack_id" getter="get_attack_id" default="0">
            공격 패턴의 고유 ID입니다.
            [AttackManager]에서 공격을 식별할 때 사용됩니다.
        </member>
        
        <member name="main" type="BattleMain" setter="set_property" getter="get_main">
            전투 시스템의 메인 노드 참조입니다. 읽기 전용입니다.
            전투 관련 전역 설정과 다른 컴포넌트들에 접근할 때 사용합니다.
        </member>
        
        <member name="box" type="BattleBox" setter="set_property" getter="get_box">
            전투 박스 노드 참조입니다. 읽기 전용입니다.
            박스 크기 변경, 위치 조정 등에 사용합니다.
        </member>
        
        <member name="soul" type="SoulBattle" setter="set_property" getter="get_soul">
            플레이어 영혼 노드 참조입니다. 읽기 전용입니다.
            영혼 위치 확인, 상태 변경 등에 사용합니다.
        </member>
        
        <member name="mask" type="AttackManager" setter="set_property" getter="get_mask">
            마스킹된 공격 컨테이너 노드 참조입니다. 읽기 전용입니다.
            클리핑된 탄환들의 부모 노드입니다.
        </member>
        
        <member name="camera" type="CameraRemoteController" setter="set_property" getter="get_camera">
            카메라 컨트롤러 노드 참조입니다. 읽기 전용입니다.
            카메라 흔들림, 줌, 이동 효과 등에 사용합니다.
        </member>
    </members>
    
    <signals>
        <signal name="remove_attack">
            <param index="0" name="id" type="int"/>
            <description>
                공격 패턴이 종료되어 제거되어야 할 때 발생합니다.
                [param id]는 제거할 공격의 [member attack_id]입니다.
                [method end_attack] 호출 시 자동으로 발생합니다.
            </description>
        </signal>
        
        <signal name="remove_bullets">
            <description>
                모든 탄환을 제거하라는 시그널입니다.
                탄환에 [code]fade[/code] 메서드가 있으면 자동으로 연결되어 호출됩니다.
                [method end_attack] 호출 시 자동으로 발생합니다.
            </description>
        </signal>
    </signals>
    
    <constants>
        <constant name="ABSOLUTE_CLIP" value="0" enum="Masking">
            절대 위치에 탄환을 배치하고 박스 영역으로 클리핑합니다.
            화면의 절대 좌표를 사용하며, 박스 밖의 탄환은 보이지 않습니다.
            가장 일반적으로 사용되는 기본 마스킹 모드입니다.
        </constant>
        
        <constant name="ABSOLUTE" value="1" enum="Masking">
            절대 위치에 탄환을 배치하고 클리핑하지 않습니다.
            화면의 절대 좌표를 사용하며, 박스 밖에도 탄환이 표시됩니다.
            [b]주의:[/b] 투명 모드에서는 사용할 수 없습니다.
        </constant>
        
        <constant name="RELATIVE_BOX_CLIP" value="2" enum="Masking">
            박스를 기준으로 한 상대 위치에 탄환을 배치하고 클리핑합니다.
            박스가 이동하면 탄환도 함께 이동하며, 박스 밖의 탄환은 보이지 않습니다.
            박스와 함께 움직이는 패턴에 적합합니다.
        </constant>
        
        <constant name="RELATIVE_BOX" value="3" enum="Masking">
            박스를 기준으로 한 상대 위치에 탄환을 배치하고 클리핑하지 않습니다.
            박스가 이동하면 탄환도 함께 이동하며, 박스 밖에도 탄환이 표시됩니다.
            박스 확장 효과나 특수 연출에 사용됩니다.
        </constant>
    </constants>
</class>